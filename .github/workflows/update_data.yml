# .github/workflows/update_data.yml

name: Update Portfolio Data Daily

on:
  schedule:
    # 매일 00:00 UTC (한국 시간 오전 9시)에 자동으로 실행
    - cron: '0 0 * * *'
  # GitHub Actions 탭에서 수동으로 실행할 수 있는 버튼 추가
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드를 다운로드합니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 파이썬 환경을 설정합니다.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' 

      # 3. stock.py 실행에 필요한 라이브러리를 설치합니다.
      - name: Install dependencies
        run: pip install requests python-dotenv

      # 4. stock.py를 실행합니다.
      - name: Run data collection script
        run: python stock.py
        env:
          # GitHub Secrets에 등록한 값들을 스크립트의 환경 변수로 주입합니다.
          P_HANTOO_APP_KEY: ${{ secrets.P_HANTOO_APP_KEY }}
          P_HANTOO_APP_SECRET: ${{ secrets.P_HANTOO_APP_SECRET }}
          P_HANTOO_ACCOUNT_NO: ${{ secrets.P_HANTOO_ACCOUNT_NO }}
          C_HANTOO_APP_KEY: ${{ secrets.C_HANTOO_APP_KEY }}
          C_HANTOO_APP_SECRET: ${{ secrets.C_HANTOO_APP_SECRET }}
          C_HANTOO_ACCOUNT_NO: ${{ secrets.C_HANTOO_ACCOUNT_NO }}
          C_KIWOOM_APP_KEY: ${{ secrets.C_KIWOOM_APP_KEY }}
          C_KIWOOM_APP_SECRET: ${{ secrets.C_KIWOOM_APP_SECRET }}
          C_KIWOOM_ACCOUNT_NO: ${{ secrets.C_KIWOOM_ACCOUNT_NO }}

      # 5. 변경된 데이터 파일(json)을 저장소에 다시 업로드(커밋&푸시)합니다.
      - name: Commit and push if data changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add portfolio_unified.json *.json
          # 파일에 변경이 있을 경우에만 커밋합니다.
          git diff --quiet && git diff --staged --quiet || (git commit -m "Automated data update"; git push)